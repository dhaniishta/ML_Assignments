#q1
import numpy as np
arr=np.array([1,2,3,6,4,5])

#a)
print(arr[::-1])

#b)
arr1=np.array([[1,2,3],[2,4,5],[1,2,3]])
arr1=arr1.flatten()
print(arr1)

#c)
arr2=np.array([[1,2],[3,4]])
arr3=np.array([[1,2],[3,4]])
if(arr2.all()==arr3.all()):
    print("Arrays are equal")
else:
    print("Arrays are unequal")

#d)
x=np.array([1,2,3,4,5,1,2,1,1,1])
unique_x,count_x=np.unique(x,return_counts=True)
freq_elements_x= unique_x[np.argmax(count_x)]
index_x=np.where(x==freq_elements_x)[0]
print("Most frequent value in x = ",freq_elements_x,"indices",index_x)

y=np.array([1,1,1,2,3,4,2,4,3,3])
unique_y,count_y=np.unique(y,return_counts=True)
freq_elements_y= unique_y[np.argmax(count_y)]
index_y=np.where(y==freq_elements_y)[0]
print("Most frequent value in y = ",freq_elements_y,"indices",index_y)

#e)
gfg=np.matrix('[4,1,9;12,3,1;4,5,6]')
print("Sum of all elements =",np.sum(gfg))
print("Sum of all elements row wise =",np.sum(gfg,1))
print("Sum of all elements column wise =",np.sum(gfg,0))

#f)
n_array=np.array([[55,25,15],[30,44,2],[11,45,77]])

sum_of_diagonal_elements=np.trace(n_array)
eigen_vectors=np.linalg.eig(n_array)
inverse_matrix=np.linalg.inv(n_array)
determinant=np.linalg.det(n_array)
print(f"Sum of diagonal elements: {sum_of_diagonal_elements}")
print(f"Eigen values and Eigen vectors of the matrix: \n{eigen_vectors}")
print(f"Inverse of the matrix: \n{inverse_matrix}")
print(f"Determinant of the matrix:{determinant}")

#g)
p1=np.array([[1,2],[2,3]])
q1=np.array([[4,5],[6,7]])
product_1=np.dot(p1,q1)
covariance_1=np.cov(p1.flatten(),q1.flatten())
print("Matrix multiplication (1st case):")
print(product_1)
print("\nCovariance between the matrices (1st case):")
print(covariance_1)

p2=np.array([[1,2],[2,3],[4,5]])
q2=np.array([[4,5,1],[6,7,2]])
product_2=np.dot(p2,q2)
covariance_2=np.cov(p2.flatten(),q2.flatten())
print("Matrix multiplication (2nd case):")
print(product_2)
print("\nCovariance between the matrices (2nd case):")
print(covariance_2)

#h)
l=np.array([[2,3,4],[3,2,9]])
m=np.array([[1,5,0],[5,10,3]])

inner_product=np.inner(l,m)
outer_product=np.outer(l,m)
cartesian_product=np.array(np.meshgrid(l.flatten(),m.flatten())).T.reshape(-1,2)
print("Inner product:")
print(inner_product)
print("\nOuter product:")
print(outer_product)
print("\nCartesian product:")
print(cartesian_product)

#q2
import numpy as np

#a)

array=np.array([[1,-2,3],[-4,5,-6]])
absolute_values=np.abs(array)
print("Element-wise absolute value:")
print(absolute_values)

percentiles_flattened=np.percentile(array,[25,50,75])
percentiles_columns=np.percentile(array,[25,50,75],axis=0)
percentiles_rows=np.percentile(array,[25,50,75],axis=1)

print("\n25th, 50th, and 75th percentiles of flattened array:")
print(percentiles_flattened)

print("\n25th, 50th, and 75th percentiles for each column:")
print(percentiles_columns)

print("\n25th, 50th, and 75th percentiles for each row:")
print(percentiles_rows)

mean_flattened = np.mean(array)
median_flattened = np.median(array)
std_flattened = np.std(array)

mean_columns = np.mean(array,axis=0)
median_columns = np.median(array,axis=0)
std_columns = np.std(array,axis=0)

mean_rows = np.mean(array,axis=1)
median_rows = np.median(array,axis=1)
std_rows = np.std(array,axis=1)

print("\nMean, Median, and Standard Deviation of flattened array:")
print(f"Mean: {mean_flattened}, Median: {median_flattened}, Std: {std_flattened}")

print("\nMean, Median, and Standard Deviation for each column:")
print(f"Mean: {mean_columns}, Median: {median_columns}, Std: {std_columns}")

print("\nMean, Median, and Standard Deviation for each row:")
print(f"Mean: {mean_rows}, Median: {median_rows}, Std: {std_rows}")

#b)

a=np.array([-1.8,-1.6,-0.5,0.5,1.6,1.8,3.0])
floor_values=np.floor(a)
print("Floor Values:")
print(floor_values)

ceiling_values=np.ceil(a)
print("\nCeiling Values:")
print(ceiling_values)

truncated_values=np.trunc(a)
print("\nTruncated values:")
print(truncated_values)

rounded_values=np.round(a)
print("\nRounded Values:")
print(rounded_values)

#q3
import numpy as np

#a)

array1=np.array([10,52,62,16,16,54,453])

sorted_array=np.sort(array1)
print("Sorted array:")
print(sorted_array)

sorted_indices=np.argsort(array1)
print("\nIndices of the sorted array:")
print(sorted_indices)

smallest_elements=np.sort(array1)[:4]
print("\n4 smallest elements:")
print(smallest_elements)

largest_elements=np.sort(array1)[-5:]
print("\n5 largest elements:")
print(largest_elements)

#b)

array2 = np.array([1.0, 1.2, 2.2, 2.0, 3.0, 2.0])
integer_elements = array2[array2 == array2.astype(int)]
float_elements = array2[array2 != array2.astype(int)]
print("\nInteger elements only:")
print(integer_elements)
print("\nFloat elements only:")
print(float_elements)

#q4
#a)
from PIL import Image
import numpy as np

def img_to_array(path):
        img = Image.open(path)
        img_array = np.array(img)

        if len(img_array.shape) == 3:
            file_name = "image_rgb.txt"
        else:
            file_name = "image_greyscale.txt"

        np.savetxt(file_name, img_array.flatten(), fmt='%d')
        print(f"Image saved as {file_name}")

img_to_array(r"/content/drive/MyDrive/Colab Notebooks/DATASETS/El Gato Sticker.jpeg")

#b)
import matplotlib.pyplot as plt

flattened_array = np.loadtxt('image_rgb.txt', dtype=int)
reshaped_array = flattened_array.reshape((736, 736, 3))

plt.imshow(reshaped_array)
plt.axis('off')
plt.show()
