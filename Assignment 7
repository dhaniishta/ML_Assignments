# Question 1: Implement the K-Means algorithm for clustering the dataset after omitting the last attribute.
# Question 2: Implement the K-Medoids algorithm for clustering the dataset after omitting the last attribute.
# Note: Converge these algorithms by using SSE. Use elbow method to find the appropriate values of K.

import pandas as pd
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Load the dataset from a URL
url = "https://drive.google.com/uc?id=1O_NwpJT-8xGfU_-3llUl2sgPu0xllOrX"
data = pd.read_csv(url)

# Drop the last column (assuming it's the target or label)
X = data.iloc[:, :-1].values

# Standardize the dataset
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

print("Dataset shape after preprocessing:", X_scaled.shape)


# Question 1: Implement the K-Means algorithm for clustering the dataset after omitting the last attribute.
# Note: Converge the K-Means algorithm using SSE and use the elbow method to find the appropriate value of K.

import numpy as np
from sklearn.metrics import pairwise_distances

# Function to initialize centroids
def initialize_centroids(X, k):
    np.random.seed(42)
    indices = np.random.permutation(X.shape[0])
    centroids = X[indices[:k]]
    return centroids

# Function to assign clusters based on nearest centroid
def assign_clusters(X, centroids):
    distances = pairwise_distances(X, centroids, metric='euclidean')
    return np.argmin(distances, axis=1)

# Function to update centroids
def update_centroids(X, clusters, k):
    new_centroids = np.array([X[clusters == i].mean(axis=0) for i in range(k)])
    return new_centroids

# Function to calculate SSE
def calculate_sse(X, clusters, centroids):
    sse = 0
    for i in range(centroids.shape[0]):
        cluster_points = X[clusters == i]
        sse += np.sum((cluster_points - centroids[i]) ** 2)
    return sse

# K-Means algorithm implementation
def k_means(X, k, max_iters=100):
    centroids = initialize_centroids(X, k)
    for i in range(max_iters):
        clusters = assign_clusters(X, centroids)
        new_centroids = update_centroids(X, clusters, k)

        # If centroids don't change, convergence has occurred
        if np.all(centroids == new_centroids):
            break
        centroids = new_centroids

    sse = calculate_sse(X, clusters, centroids)
    return clusters, centroids, sse

# Elbow method to find optimal K
def elbow_method(X, max_k):
    sse_values = []
    for k in range(1, max_k+1):
        _, _, sse = k_means(X, k)
        sse_values.append(sse)

    plt.plot(range(1, max_k+1), sse_values, marker='o')
    plt.title("Elbow Method for Optimal K (K-Means)")
    plt.xlabel("Number of clusters (K)")
    plt.ylabel("SSE")
    plt.show()

# Apply elbow method for K-Means
elbow_method(X_scaled, max_k=10)


# Question 2: Implement the K-Medoids algorithm for clustering the dataset after omitting the last attribute.
# Note: Converge the K-Medoids algorithm using SSE and use the elbow method to find the appropriate value of K.

from sklearn.metrics import pairwise_distances_argmin_min

# K-Medoids algorithm implementation
def k_medoids(X, k, max_iters=100):
    # Randomly initialize medoids
    medoid_indices = np.random.choice(X.shape[0], k, replace=False)
    medoids = X[medoid_indices]

    for i in range(max_iters):
        # Assign points to the nearest medoid
        clusters, distances = pairwise_distances_argmin_min(X, medoids)

        # Update medoids by finding the most central point in each cluster
        new_medoids = np.copy(medoids)
        for j in range(k):
            cluster_points = X[clusters == j]
            medoid_idx = np.argmin(np.sum(pairwise_distances(cluster_points, cluster_points), axis=1))
            new_medoids[j] = cluster_points[medoid_idx]

        # If medoids don't change, convergence has occurred
        if np.all(medoids == new_medoids):
            break
        medoids = new_medoids

    # Calculate SSE
    sse = calculate_sse(X, clusters, medoids)
    return clusters, medoids, sse

# Elbow method for K-Medoids
def elbow_method_medoids(X, max_k):
    sse_values = []
    for k in range(1, max_k+1):
        _, _, sse = k_medoids(X, k)
        sse_values.append(sse)

    plt.plot(range(1, max_k+1), sse_values, marker='o')
    plt.title("Elbow Method for Optimal K (K-Medoids)")
    plt.xlabel("Number of clusters (K)")
    plt.ylabel("SSE")
    plt.show()

# Apply elbow method for K-Medoids
elbow_method_medoids(X_scaled, max_k=10)
